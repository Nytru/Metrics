#version: "3.9"
#
#volumes:
#  prometheus_data: {}
#  grafana_data: {}
#
#networks:
#  front-tier:
#  back-tier:
#
#services:
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    depends_on:
#      - cadvisor
#    networks:
#      - back-tier
#    restart: always
#  
#  node-exporter:
#    image: quay.io/prometheus/node-exporter:latest
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#      - /:/host:ro,rslave
#    command:
#      - '--path.rootfs=/host'
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - --collector.filesystem.ignored-mount-points
#      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#    ports:
#      - "9100:9100"
#    networks:
#      - back-tier
#    restart: always
#
#  Worker:
#    build:
#      context: ../PrometheusGrafanaTry
#      dockerfile: Dockerfile
#    image: worker_grafana_prom
#    environment:
#      - ASPNETCORE_HTTP_PORTS=5212
#    ports:
#      - "5212:5212"
#
#  grafana:
#    image: grafana/grafana:latest
#    ports:
#      - "3000:3000"
#    restart: always



version: '3.8'

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}

services:
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring
        
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    restart: unless-stopped
    
  worker:
    build:
      context: ../PrometheusGrafanaTry
      dockerfile: Dockerfile
    image: worker_grafana_prom
    environment:
      - ASPNETCORE_HTTP_PORTS=5212
    ports:
      - "5212:5212"
    networks:
      - monitoring
        
  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  collector:
    build:
      context: ../pyhonCollector
      dockerfile: Dockerfile
    image: python_collector
    restart: unless-stopped
    ports:
      - "5213:5213"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    command: -enable_metrics app,cpu,cpuLoad,cpuset,disk,memory,perf_event,process
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
